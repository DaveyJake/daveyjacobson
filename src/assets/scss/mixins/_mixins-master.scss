// Rem output with px fallback
@mixin font-size($sizeValue: 1) {
	font-size: ($sizeValue * 16) * 1px;
	font-size: $sizeValue * 1rem;
}

// Center block
@mixin center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Clearfix
@mixin clearfix() {
	content: ' ';
	display: table;
	table-layout: fixed;
}

// Clear after (not all clearfix need this also)
@mixin clearfix-after() {
	clear: both;
}

// Column width with margin
@mixin column-width($numberColumns: 3) {
	width: map-get( $columns, $numberColumns ) - ( ( $columns__margin * ( $numberColumns - 1 ) ) / $numberColumns );
}

// Center content
@mixin absolute-center($direction: null, $offset: 0) {
    position: absolute;
    top: if($offset > 0 and $direction == top, calc(50% + #{$offset}rem), 50%);
    left: if($offset > 0 and $direction == left, calc(50% + #{$offset}rem), 50%);
    transform: translate3d(-50%, -50%, 0);
}

@mixin horizontal-center($direction: null, $offset: 0) {
    position: absolute;
    left: if($offset > 0 and $direction == left, calc(50% + #{$offset}rem), 50%);;
    transform: translateX(-50%);
}

@mixin vertical-center($direction: null, $offset: 0) {
    position: absolute;
    top: if($offset > 0 and $direction == top, calc(50% + #{$offset}rem), 50%);
    transform: translateY(-50%);
}

// Slide open/close
@mixin slide-speed($property: transform, $duration: 0.25, $delay: 0) {
    transition: slide-speed($property, $duration, $delay);
}

// Mobile Menu
@mixin mobile-close($property: null) {
    height: 0;
    overflow: hidden;

    @if ($property == null) {
        $property: (height, overflow);
    }
    @else {
        $property: join((height, overflow), $property, 'comma');
    }

    @include slide-speed($property);
}
@mixin mobile-open($property: null) {
    height: auto;
    overflow: visible;

    @if ($property == null) {
        $property: (height, overflow);
    }
    @else {
        $property: join((height, overflow), $property, 'comma');
    }

    @include slide-speed($property);
}
