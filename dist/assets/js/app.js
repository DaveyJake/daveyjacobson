/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/assets/js/app.js":
/*!******************************!*\
  !*** ./src/assets/js/app.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _vendor = __webpack_require__(/*! ./vendor */ \"./src/assets/js/vendor/index.js\");\n\nvar _custom = _interopRequireDefault(__webpack_require__(/*! ./custom */ \"./src/assets/js/custom.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar $ = window.jQuery;\n(0, _custom.default)();\n\n//# sourceURL=webpack:///./src/assets/js/app.js?");

/***/ }),

/***/ "./src/assets/js/custom.js":
/*!*********************************!*\
  !*** ./src/assets/js/custom.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar $ = window.jQuery,\n    body = document.body;\n/**\n * Main JavaScript Source\n *\n * @since 1.0.0\n */\n\nvar App = function App() {\n  $(document).ready(function () {\n    $('#fp').fullpage({\n      anchors: ['home', 'portfolio', 'blog', 'about', 'contact'],\n      sectionsColor: ['rgba(0, 0, 0, 0.5)', 'rgba(0, 0, 0, 0.5)', 'rgba(0, 0, 0, 0.5)', 'rgba(0, 0, 0, 0.75)', '#000'],\n      paddingTop: 62,\n      parallax: true,\n      parallaxOptions: {\n        type: 'reveal',\n        percentage: 62,\n        property: 'translate'\n      },\n      menu: '#menu',\n      slidesNavigation: true,\n      scrollingSpeed: 1000,\n      autoScrolling: true,\n      scrollBar: false,\n      fitToSection: false,\n      navigation: false,\n      verticalCentered: true,\n      // Fullpage.js Events\n      onLeave: function onLeave(origin, destination, direction) {//$( `#${destination.anchor}-page` ).parallax({ imageSrc: `/wp-content/themes/daveyjacobson/dist/assets/images/${destination.anchor}@2x.jpg` });\n      },\n      afterLoad: function afterLoad(origin, destination, direction) {\n        fullpage_api.parallax.init();\n      },\n      afterRender: function afterRender() {\n        $(body).prepend($('#masthead'));\n        slideImageFadeIn();\n      },\n      afterResize: function afterResize(width, height) {\n        $(body).prepend($('#masthead'));\n      },\n      afterReBuild: function afterReBuild() {},\n      afterResponsive: function afterResponsive(isResponsive) {},\n      afterSlideLoad: function afterSlideLoad(section, origin, destination, direction) {},\n      onSlideLeave: function onSlideLeave(section, origin, destination, direction) {\n        slideImageFadeOut(section);\n        slideImageFadeIn(destination);\n      }\n    });\n    $('#hamburger').click(function (e) {\n      e.preventDefault();\n      showUI();\n    });\n    $('#blocker').click(function (e) {\n      e.preventDefault();\n      showUI();\n    });\n    $('[data-menuanchor] > a').click(function (e) {\n      showUI();\n    });\n\n    function slideImageFadeIn() {\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (null !== selector) {\n        return $(selector + ' .fp-bg').css({\n          opacity: 1,\n          transition: 'opacity 1s ease-in-out'\n        });\n      } else {\n        return $('.fp-bg').css({\n          opacity: 1,\n          transition: 'opacity 1s ease-in-out'\n        });\n      }\n    }\n\n    function slideImageFadeOut() {\n      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (null !== selector) {\n        return $(selector + ' .fp-bg').css({\n          opacity: 0,\n          transition: 'opacity 1s ease-in-out'\n        });\n      } else {\n        return $('.fp-bg').css({\n          opacity: 0,\n          transition: 'opacity 1s ease-in-out'\n        });\n      }\n    }\n\n    function showUI() {\n      $('#hamburger').toggleClass('mm-opened');\n      $('#masthead, body').toggleClass('mm-open');\n    }\n    /*$( '#menu-item-52 a' ).click( function( e ) {\n        e.preventDefault();\n        $( this ).parents( '#menu' ).toggleClass( 'open' );\n    });*/\n\n  });\n};\n\nmodule.exports = App;\n\n//# sourceURL=webpack:///./src/assets/js/custom.js?");

/***/ }),

/***/ "./src/assets/js/vendor/debug.js":
/*!***************************************!*\
  !*** ./src/assets/js/vendor/debug.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * Window deubgger for JS.\n *\n * @return {Methods} See line 27.\n */\nvar debug = function debug() {\n  var self = window;\n\n  function exec_callback(args) {\n    !callback_func || !callback_force && con && con.log || callback_func.apply(self, args);\n  }\n\n  function is_level(level) {\n    return 0 < log_level ? log_level > level : log_methods.length + log_level <= level;\n  }\n\n  for (var callback_func, callback_force, aps = Array.prototype.slice, con = self.console, that = {}, log_level = 9, log_methods = ['error', 'warn', 'info', 'debug', 'log'], pass_methods = 'assert clear count dir dirxml exception group groupCollapsed groupEnd profile profileEnd table time timeEnd trace'.split(' '), idx = pass_methods.length, logs = []; 0 <= --idx;) {\n    !function (method) {\n      that[method] = function () {\n        0 !== log_level && con && con[method] && con[method].apply(con, arguments);\n      };\n    }(pass_methods[idx]);\n  }\n\n  for (idx = log_methods.length; 0 <= --idx;) {\n    !function (idx, level) {\n      that[level] = function () {\n        var args = aps.call(arguments),\n            log_arr = [level].concat(args);\n        logs.push(log_arr), exec_callback(log_arr), con && is_level(idx) && (con.firebug ? con[level].apply(self, args) : con[level] ? con[level](args) : con.log(args));\n      };\n    }(idx, log_methods[idx]);\n  }\n\n  return that.setLevel = function (level) {\n    log_level = 'number' === typeof level ? level : 9;\n  }, that.setCallback = function () {\n    var args = aps.call(arguments),\n        max = logs.length,\n        i = max;\n\n    for (callback_func = args.shift() || null, callback_force = 'boolean' == typeof args[0] && args.shift(), i -= 'number' == typeof args[0] ? args.shift() : max; i < max;) {\n      exec_callback(logs[i++]);\n    }\n  }, that;\n};\n\nmodule.exports = debug;\n\n//# sourceURL=webpack:///./src/assets/js/vendor/debug.js?");

/***/ }),

/***/ "./src/assets/js/vendor/index.js":
/*!***************************************!*\
  !*** ./src/assets/js/vendor/index.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"debug\", {\n  enumerable: true,\n  get: function get() {\n    return _debug2.default;\n  }\n});\nObject.defineProperty(exports, \"Modernizr\", {\n  enumerable: true,\n  get: function get() {\n    return _modernizr.default;\n  }\n});\nObject.defineProperty(exports, \"navigation\", {\n  enumerable: true,\n  get: function get() {\n    return _navigation2.default;\n  }\n});\nObject.defineProperty(exports, \"skipLinkFocus\", {\n  enumerable: true,\n  get: function get() {\n    return _skipLinkFocusFix.default;\n  }\n});\nObject.defineProperty(exports, \"noFOUC\", {\n  enumerable: true,\n  get: function get() {\n    return _noFouc.default;\n  }\n});\n\nvar _debug2 = _interopRequireDefault(__webpack_require__(/*! ./debug */ \"./src/assets/js/vendor/debug.js\"));\n\nvar _modernizr = _interopRequireDefault(__webpack_require__(/*! ./modernizr */ \"./src/assets/js/vendor/modernizr.js\"));\n\nvar _navigation2 = _interopRequireDefault(__webpack_require__(/*! ./navigation */ \"./src/assets/js/vendor/navigation.js\"));\n\nvar _skipLinkFocusFix = _interopRequireDefault(__webpack_require__(/*! ./skip-link-focus-fix */ \"./src/assets/js/vendor/skip-link-focus-fix.js\"));\n\nvar _noFouc = _interopRequireDefault(__webpack_require__(/*! ./no-fouc.js */ \"./src/assets/js/vendor/no-fouc.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//# sourceURL=webpack:///./src/assets/js/vendor/index.js?");

/***/ }),

/***/ "./src/assets/js/vendor/modernizr.js":
/*!*******************************************!*\
  !*** ./src/assets/js/vendor/modernizr.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("var __WEBPACK_AMD_DEFINE_RESULT__;\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*!\n * modernizr v3.6.0\n * Build https://modernizr.com/download?-cors-customelements-customevent-hashchange-hiddenscroll-template-touchevents-addtest-setclasses-dontmin\n *\n * Copyright (c)\n *  Faruk Ates\n *  Paul Irish\n *  Alex Sexton\n *  Ryan Seddon\n *  Patrick Kettner\n *  Stu Cox\n *  Richard Herrera\n\n * MIT License\n */\n\n/*\n * Modernizr tests which native CSS3 and HTML5 features are available in the\n * current UA and makes the results available to you in two ways: as properties on\n * a global `Modernizr` object, and as classes on the `<html>` element. This\n * information allows you to progressively enhance your pages with a granular level\n * of control over the experience.\n */\n;\n\n(function (window, document, undefined) {\n  var classes = [],\n      tests = [];\n  /**\n   *\n   * ModernizrProto is the constructor for Modernizr\n   *\n   * @class\n   * @access public\n   */\n\n  var ModernizrProto = {\n    // The current version, dummy\n    _version: '3.6.0',\n    // Any settings that don't work as separate modules\n    // can go in here as configuration.\n    _config: {\n      'classPrefix': '',\n      'enableClasses': true,\n      'enableJSClass': true,\n      'usePrefixes': true\n    },\n    // Queue of tests\n    _q: [],\n    // Stub these for people who are listening\n    on: function on(test, cb) {\n      // I don't really think people should do this, but we can\n      // safe guard it a bit.\n      // -- NOTE:: this gets WAY overridden in src/addTest for actual async tests.\n      // This is in case people listen to synchronous tests. I would leave it out,\n      // but the code to *disallow* sync tests in the real version of this\n      // function is actually larger than this.\n      var self = this;\n      setTimeout(function () {\n        cb(self[test]);\n      }, 0);\n    },\n    addTest: function addTest(name, fn, options) {\n      tests.push({\n        name: name,\n        fn: fn,\n        options: options\n      });\n    },\n    addAsyncTest: function addAsyncTest(fn) {\n      tests.push({\n        name: null,\n        fn: fn\n      });\n    }\n  }; // Fake some of Object.create so we can force non test results to be non \"own\" properties.\n\n  var Modernizr = function Modernizr() {};\n\n  Modernizr.prototype = ModernizrProto; // Leak modernizr globally when you `require` it rather than force it here.\n  // Overwrite name so constructor name is nicer :D\n\n  Modernizr = new Modernizr();\n  /*!\n  {\n    \"name\": \"CustomEvent\",\n    \"property\": \"customevent\",\n    \"tags\": [\"customevent\"],\n    \"authors\": [\"Alberto Elias\"],\n    \"notes\": [{\n      \"name\": \"W3C DOM reference\",\n      \"href\": \"https://www.w3.org/TR/DOM-Level-3-Events/#interface-CustomEvent\"\n    }, {\n      \"name\": \"MDN documentation\",\n      \"href\": \"https://developer.mozilla.org/en/docs/Web/API/CustomEvent\"\n    }],\n    \"polyfills\": [\"eventlistener\"]\n  }\n  !*/\n\n  /* DOC\n   Detects support for CustomEvent.\n   */\n\n  Modernizr.addTest('customevent', 'CustomEvent' in window && 'function' === typeof window.CustomEvent);\n  /*!\n  {\n    \"name\": \"Cross-Origin Resource Sharing\",\n    \"property\": \"cors\",\n    \"caniuse\": \"cors\",\n    \"authors\": [\"Theodoor van Donge\"],\n    \"notes\": [{\n      \"name\": \"MDN documentation\",\n      \"href\": \"https://developer.mozilla.org/en-US/docs/HTTP/Access_control_CORS\"\n    }],\n    \"polyfills\": [\"pmxdr\", \"ppx\", \"flxhr\"]\n  }\n  !*/\n\n  /* DOC\n  Detects support for Cross-Origin Resource Sharing: method of performing XMLHttpRequests across domains.\n  */\n\n  Modernizr.addTest('cors', 'XMLHttpRequest' in window && 'withCredentials' in new XMLHttpRequest());\n  /*!\n  {\n    \"name\": \"Custom Elements API\",\n    \"property\": \"customelements\",\n    \"tags\": [\"customelements\"],\n    \"polyfills\": [\"customelements\"],\n    \"notes\": [{\n      \"name\": \"Specs for Custom Elements\",\n      \"href\": \"https://www.w3.org/TR/custom-elements/\"\n    }]\n  }\n  !*/\n\n  /* DOC\n  Detects support for the Custom Elements API, to create custom html elements via js\n  */\n\n  Modernizr.addTest('customelements', 'customElements' in window);\n  /**\n   * List of property values to set for css tests. See ticket #21\n   * http://git.io/vUGl4\n   *\n   * @memberof Modernizr\n   * @name Modernizr._prefixes\n   * @optionName Modernizr._prefixes\n   * @optionProp prefixes\n   * @access public\n   * @example\n   *\n   * Modernizr._prefixes is the internal list of prefixes that we test against\n   * inside of things like [prefixed](#modernizr-prefixed) and [prefixedCSS](#-code-modernizr-prefixedcss). It is simply\n   * an array of kebab-case vendor prefixes you can use within your code.\n   *\n   * Some common use cases include\n   *\n   * Generating all possible prefixed version of a CSS property\n   * ```js\n   * var rule = Modernizr._prefixes.join('transform: rotate(20deg); ');\n   *\n   * rule === 'transform: rotate(20deg); webkit-transform: rotate(20deg); moz-transform: rotate(20deg); o-transform: rotate(20deg); ms-transform: rotate(20deg);'\n   * ```\n   *\n   * Generating all possible prefixed version of a CSS value\n   * ```js\n   * rule = 'display:' +  Modernizr._prefixes.join('flex; display:') + 'flex';\n   *\n   * rule === 'display:flex; display:-webkit-flex; display:-moz-flex; display:-o-flex; display:-ms-flex; display:flex'\n   * ```\n   */\n  // we use ['',''] rather than an empty array in order to allow a pattern of .`join()`ing prefixes to test\n  // values in feature detects to continue to work\n\n  var prefixes = ModernizrProto._config.usePrefixes ? ' -webkit- -moz- -o- -ms- '.split(' ') : ['', '']; // expose these for the plugin API. Look in the source for how to join() them against your input\n\n  ModernizrProto._prefixes = prefixes;\n  /**\n   * is returns a boolean if the typeof an obj is exactly type.\n   *\n   * @access private\n   * @function is\n   * @param {*} obj - A thing we want to check the type of\n   * @param {string} type - A string to compare the typeof against\n   * @returns {boolean}\n   */\n\n  function is(obj, type) {\n    return _typeof(obj) === type;\n  }\n\n  ;\n  /**\n   * Run through all tests and detect their support in the current UA.\n   *\n   * @access private\n   */\n\n  function testRunner() {\n    var featureNames;\n    var feature;\n    var aliasIdx;\n    var result;\n    var nameIdx;\n    var featureName;\n    var featureNameSplit;\n\n    for (var featureIdx in tests) {\n      if (tests.hasOwnProperty(featureIdx)) {\n        featureNames = [];\n        feature = tests[featureIdx]; // run the test, throw the return value into the Modernizr,\n        // then based on that boolean, define an appropriate className\n        // and push it into an array of classes we'll join later.\n        //\n        // If there is no name, it's an 'async' test that is run,\n        // but not directly added to the object. That should\n        // be done with a post-run addTest call.\n\n        if (feature.name) {\n          featureNames.push(feature.name.toLowerCase());\n\n          if (feature.options && feature.options.aliases && feature.options.aliases.length) {\n            // Add all the aliases into the names list\n            for (aliasIdx = 0; aliasIdx < feature.options.aliases.length; aliasIdx++) {\n              featureNames.push(feature.options.aliases[aliasIdx].toLowerCase());\n            }\n          }\n        } // Run the test, or use the raw value if it's not a function\n\n\n        result = is(feature.fn, 'function') ? feature.fn() : feature.fn; // Set each of the names on the Modernizr object\n\n        for (nameIdx = 0; nameIdx < featureNames.length; nameIdx++) {\n          featureName = featureNames[nameIdx]; // Support dot properties as sub tests. We don't do checking to make sure\n          // that the implied parent tests have been added. You must call them in\n          // order (either in the test, or make the parent test a dependency).\n          //\n          // Cap it to TWO to make the logic simple and because who needs that kind of subtesting\n          // hashtag famous last words\n\n          featureNameSplit = featureName.split('.');\n\n          if (1 === featureNameSplit.length) {\n            Modernizr[featureNameSplit[0]] = result;\n          } else {\n            // cast to a Boolean, if not one already\n            if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n              Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n            }\n\n            Modernizr[featureNameSplit[0]][featureNameSplit[1]] = result;\n          }\n\n          classes.push((result ? '' : 'no-') + featureNameSplit.join('-'));\n        }\n      }\n    }\n  }\n\n  ;\n  /**\n   * docElement is a convenience wrapper to grab the root element of the document\n   *\n   * @access private\n   * @returns {HTMLElement|SVGElement} The root element of the document\n   */\n\n  var docElement = document.documentElement;\n  /**\n   * A convenience helper to check if the document we are running in is an SVG document\n   *\n   * @access private\n   * @returns {boolean}\n   */\n\n  var isSVG = 'svg' === docElement.nodeName.toLowerCase();\n  /**\n   * setClasses takes an array of class names and adds them to the root element\n   *\n   * @access private\n   * @function setClasses\n   * @param {string[]} classes - Array of class names\n   */\n  // Pass in an and array of class names, e.g.:\n  //  ['no-webp', 'borderradius', ...]\n\n  function setClasses(classes) {\n    var className = docElement.className;\n    var classPrefix = Modernizr._config.classPrefix || '';\n\n    if (isSVG) {\n      className = className.baseVal;\n    } // Change `no-js` to `js` (independently of the `enableClasses` option)\n    // Handle classPrefix on this too\n\n\n    if (Modernizr._config.enableJSClass) {\n      var reJS = new RegExp('(^|\\\\s)' + classPrefix + 'no-js(\\\\s|$)');\n      className = className.replace(reJS, '$1' + classPrefix + 'js$2');\n    }\n\n    if (Modernizr._config.enableClasses) {\n      // Add the new classes\n      className += ' ' + classPrefix + classes.join(' ' + classPrefix);\n\n      if (isSVG) {\n        docElement.className.baseVal = className;\n      } else {\n        docElement.className = className;\n      }\n    }\n  }\n  /**\n   * createElement is a convenience wrapper around document.createElement. Since we\n   * use createElement all over the place, this allows for (slightly) smaller code\n   * as well as abstracting away issues with creating elements in contexts other than\n   * HTML documents (e.g. SVG documents).\n   *\n   * @access private\n   * @function createElement\n   * @returns {HTMLElement|SVGElement} An HTML or SVG element\n   */\n\n\n  function createElement() {\n    if ('function' !== typeof document.createElement) {\n      // This is the case in IE7, where the type of createElement is \"object\".\n      // For this reason, we cannot call apply() as Object is not a Function.\n      return document.createElement(arguments[0]);\n    } else if (isSVG) {\n      return document.createElementNS.call(document, 'http://www.w3.org/2000/svg', arguments[0]);\n    } else {\n      return document.createElement.apply(document, arguments);\n    }\n  }\n  /*!\n  {\n    \"name\": \"Template Tag\",\n    \"property\": \"template\",\n    \"tags\": [\"elem\"],\n    \"notes\": [{\n      \"name\": \"HTML5Rocks Article\",\n      \"href\": \"http://www.html5rocks.com/en/tutorials/webcomponents/template/\"\n    },{\n      \"name\": \"W3 Spec\",\n      \"href\": \"https://dvcs.w3.org/hg/webcomponents/raw-file/tip/spec/templates/index.html\"\n    }]\n  }\n  !*/\n\n\n  Modernizr.addTest('template', 'content' in createElement('template'));\n  /**\n   * Modernizr.hasEvent() detects support for a given event\n   *\n   * @memberof Modernizr\n   * @name Modernizr.hasEvent\n   * @optionName Modernizr.hasEvent()\n   * @optionProp hasEvent\n   * @access public\n   * @function hasEvent\n   * @param  {string|*} eventName - the name of an event to test for (e.g. \"resize\")\n   * @param  {Element|string} [element=HTMLDivElement] - is the element|document|window|tagName to test on\n   * @returns {boolean}\n   * @example\n   *  `Modernizr.hasEvent` lets you determine if the browser supports a supplied event.\n   *  By default, it does this detection on a div element\n   *\n   * ```js\n   *  hasEvent('blur') // true;\n   * ```\n   *\n   * However, you are able to give an object as a second argument to hasEvent to\n   * detect an event on something other than a div.\n   *\n   * ```js\n   *  hasEvent('devicelight', window) // true;\n   * ```\n   *\n   */\n\n  var hasEvent = function () {\n    // Detect whether event support can be detected via `in`. Test on a DOM element\n    // using the \"blur\" event b/c it should always exist. bit.ly/event-detection\n    var needsFallback = !('onblur' in document.documentElement);\n\n    function inner(eventName, element) {\n      var isSupported;\n\n      if (!eventName) {\n        return false;\n      }\n\n      if (!element || 'string' === typeof element) {\n        element = createElement(element || 'div');\n      } // Testing via the `in` operator is sufficient for modern browsers and IE.\n      // When using `setAttribute`, IE skips \"unload\", WebKit skips \"unload\" and\n      // \"resize\", whereas `in` \"catches\" those.\n\n\n      eventName = 'on' + eventName;\n      isSupported = eventName in element; // Fallback technique for old Firefox - bit.ly/event-detection\n\n      if (!isSupported && needsFallback) {\n        if (!element.setAttribute) {\n          // Switch to generic element if it lacks `setAttribute`.\n          // It could be the `document`, `window`, or something else.\n          element = createElement('div');\n        }\n\n        element.setAttribute(eventName, '');\n        isSupported = 'function' === typeof element[eventName];\n\n        if (element[eventName] !== undefined) {\n          // If property was created, \"remove it\" by setting value to `undefined`.\n          element[eventName] = undefined;\n        }\n\n        element.removeAttribute(eventName);\n      }\n\n      return isSupported;\n    }\n\n    return inner;\n  }();\n\n  ModernizrProto.hasEvent = hasEvent;\n  /*!\n  {\n    \"name\": \"Hashchange event\",\n    \"property\": \"hashchange\",\n    \"caniuse\": \"hashchange\",\n    \"tags\": [\"history\"],\n    \"notes\": [{\n      \"name\": \"MDN documentation\",\n      \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/window.onhashchange\"\n    }],\n    \"polyfills\": [\n      \"jquery-hashchange\",\n      \"moo-historymanager\",\n      \"jquery-ajaxy\",\n      \"hasher\",\n      \"shistory\"\n    ]\n  }\n  !*/\n\n  /* DOC\n  Detects support for the `hashchange` event, fired when the current location fragment changes.\n  */\n\n  Modernizr.addTest('hashchange', function () {\n    if (false === hasEvent('hashchange', window)) {\n      return false;\n    } // documentMode logic from YUI to filter out IE8 Compat Mode\n    //   which false positives.\n\n\n    return document.documentMode === undefined || 7 < document.documentMode;\n  });\n  /**\n   * hasOwnProp is a shim for hasOwnProperty that is needed for Safari 2.0 support\n   *\n   * @author kangax\n   * @access private\n   * @function hasOwnProp\n   * @param {object} object - The object to check for a property\n   * @param {string} property - The property to check for\n   * @returns {boolean}\n   */\n  // hasOwnProperty shim by kangax needed for Safari 2.0 support\n\n  var hasOwnProp;\n\n  (function () {\n    var _hasOwnProperty = {}.hasOwnProperty;\n    /* istanbul ignore else */\n\n    /* we have no way of testing IE 5.5 or safari 2,\n     * so just assume the else gets hit */\n\n    if (!is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined')) {\n      hasOwnProp = function hasOwnProp(object, property) {\n        return _hasOwnProperty.call(object, property);\n      };\n    } else {\n      hasOwnProp = function hasOwnProp(object, property) {\n        /* yes, this can give false positives/negatives, but most of the time we don't care about those */\n        return property in object && is(object.constructor.prototype[property], 'undefined');\n      };\n    }\n  })(); // _l tracks listeners for async tests, as well as tests that execute after the initial run\n\n\n  ModernizrProto._l = {};\n  /**\n   * Modernizr.on is a way to listen for the completion of async tests. Being\n   * asynchronous, they may not finish before your scripts run. As a result you\n   * will get a possibly false negative `undefined` value.\n   *\n   * @memberof Modernizr\n   * @name Modernizr.on\n   * @access public\n   * @function on\n   * @param {string} feature - String name of the feature detect\n   * @param {function} cb - Callback function returning a Boolean - true if feature is supported, false if not\n   * @example\n   *\n   * ```js\n   * Modernizr.on('flash', function( result ) {\n   *   if (result) {\n   *    // the browser has flash\n   *   } else {\n   *     // the browser does not have flash\n   *   }\n   * });\n   * ```\n   */\n\n  ModernizrProto.on = function (feature, cb) {\n    // Create the list of listeners if it doesn't exist\n    if (!this._l[feature]) {\n      this._l[feature] = [];\n    } // Push this test on to the listener list\n\n\n    this._l[feature].push(cb); // If it's already been resolved, trigger it on next tick\n\n\n    if (Modernizr.hasOwnProperty(feature)) {\n      // Next Tick\n      setTimeout(function () {\n        Modernizr._trigger(feature, Modernizr[feature]);\n      }, 0);\n    }\n  };\n  /**\n   * _trigger is the private function used to signal test completion and run any\n   * callbacks registered through [Modernizr.on](#modernizr-on)\n   *\n   * @memberof Modernizr\n   * @name Modernizr._trigger\n   * @access private\n   * @function _trigger\n   * @param {string} feature - string name of the feature detect\n   * @param {function|boolean} [res] - A feature detection function, or the boolean =\n   * result of a feature detection function\n   */\n\n\n  ModernizrProto._trigger = function (feature, res) {\n    if (!this._l[feature]) {\n      return;\n    }\n\n    var cbs = this._l[feature]; // Force async\n\n    setTimeout(function () {\n      var i, cb;\n\n      for (i = 0; i < cbs.length; i++) {\n        cb = cbs[i];\n        cb(res);\n      }\n    }, 0); // Don't trigger these again\n\n    delete this._l[feature];\n  };\n  /**\n   * addTest allows you to define your own feature detects that are not currently\n   * included in Modernizr (under the covers it's the exact same code Modernizr\n   * uses for its own [feature detections](https://github.com/Modernizr/Modernizr/tree/master/feature-detects)). Just like the offical detects, the result\n   * will be added onto the Modernizr object, as well as an appropriate className set on\n   * the html element when configured to do so\n   *\n   * @memberof Modernizr\n   * @name Modernizr.addTest\n   * @optionName Modernizr.addTest()\n   * @optionProp addTest\n   * @access public\n   * @function addTest\n   * @param {string|object} feature - The string name of the feature detect, or an\n   * object of feature detect names and test\n   * @param {function|boolean} test - Function returning true if feature is supported,\n   * false if not. Otherwise a boolean representing the results of a feature detection\n   * @example\n   *\n   * The most common way of creating your own feature detects is by calling\n   * `Modernizr.addTest` with a string (preferably just lowercase, without any\n   * punctuation), and a function you want executed that will return a boolean result\n   *\n   * ```js\n   * Modernizr.addTest('itsTuesday', function() {\n   *  var d = new Date();\n   *  return d.getDay() === 2;\n   * });\n   * ```\n   *\n   * When the above is run, it will set Modernizr.itstuesday to `true` when it is tuesday,\n   * and to `false` every other day of the week. One thing to notice is that the names of\n   * feature detect functions are always lowercased when added to the Modernizr object. That\n   * means that `Modernizr.itsTuesday` will not exist, but `Modernizr.itstuesday` will.\n   *\n   *\n   *  Since we only look at the returned value from any feature detection function,\n   *  you do not need to actually use a function. For simple detections, just passing\n   *  in a statement that will return a boolean value works just fine.\n   *\n   * ```js\n   * Modernizr.addTest('hasJquery', 'jQuery' in window);\n   * ```\n   *\n   * Just like before, when the above runs `Modernizr.hasjquery` will be true if\n   * jQuery has been included on the page. Not using a function saves a small amount\n   * of overhead for the browser, as well as making your code much more readable.\n   *\n   * Finally, you also have the ability to pass in an object of feature names and\n   * their tests. This is handy if you want to add multiple detections in one go.\n   * The keys should always be a string, and the value can be either a boolean or\n   * function that returns a boolean.\n   *\n   * ```js\n   * var detects = {\n   *  'hasjquery': 'jQuery' in window,\n   *  'itstuesday': function() {\n   *    var d = new Date();\n   *    return d.getDay() === 2;\n   *  }\n   * }\n   *\n   * Modernizr.addTest(detects);\n   * ```\n   *\n   * There is really no difference between the first methods and this one, it is\n   * just a convenience to let you write more readable code.\n   */\n\n\n  function addTest(feature, test) {\n    if ('object' === _typeof(feature)) {\n      for (var key in feature) {\n        if (hasOwnProp(feature, key)) {\n          addTest(key, feature[key]);\n        }\n      }\n    } else {\n      feature = feature.toLowerCase();\n      var featureNameSplit = feature.split('.');\n      var last = Modernizr[featureNameSplit[0]]; // Again, we don't check for parent test existence. Get that right, though.\n\n      if (2 == featureNameSplit.length) {\n        last = last[featureNameSplit[1]];\n      }\n\n      if ('undefined' !== typeof last) {\n        // we're going to quit if you're trying to overwrite an existing test\n        // if we were to allow it, we'd do this:\n        //   var re = new RegExp(\"\\\\b(no-)?\" + feature + \"\\\\b\");\n        //   docElement.className = docElement.className.replace( re, '' );\n        // but, no rly, stuff 'em.\n        return Modernizr;\n      }\n\n      test = 'function' === typeof test ? test() : test; // Set the value (this is the magic, right here).\n\n      if (1 == featureNameSplit.length) {\n        Modernizr[featureNameSplit[0]] = test;\n      } else {\n        // cast to a Boolean, if not one already\n        if (Modernizr[featureNameSplit[0]] && !(Modernizr[featureNameSplit[0]] instanceof Boolean)) {\n          Modernizr[featureNameSplit[0]] = new Boolean(Modernizr[featureNameSplit[0]]);\n        }\n\n        Modernizr[featureNameSplit[0]][featureNameSplit[1]] = test;\n      } // Set a single class (either `feature` or `no-feature`)\n\n\n      setClasses([(!!test && false != test ? '' : 'no-') + featureNameSplit.join('-')]); // Trigger the event\n\n      Modernizr._trigger(feature, test);\n    }\n\n    return Modernizr; // allow chaining.\n  } // After all the tests are run, add self to the Modernizr prototype\n\n\n  Modernizr._q.push(function () {\n    ModernizrProto.addTest = addTest;\n  });\n  /**\n   * getBody returns the body of a document, or an element that can stand in for\n   * the body if a real body does not exist\n   *\n   * @access private\n   * @function getBody\n   * @returns {HTMLElement|SVGElement} Returns the real body of a document, or an\n   * artificially created element that stands in for the body\n   */\n\n\n  function getBody() {\n    // After page load injecting a fake body doesn't work so check if body exists\n    var body = document.body;\n\n    if (!body) {\n      // Can't use the real body create a fake one.\n      body = createElement(isSVG ? 'svg' : 'body');\n      body.fake = true;\n    }\n\n    return body;\n  }\n  /**\n   * injectElementWithStyles injects an element with style element and some CSS rules\n   *\n   * @access private\n   * @function injectElementWithStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   */\n\n\n  function injectElementWithStyles(rule, callback, nodes, testnames) {\n    var mod = 'modernizr';\n    var style;\n    var ret;\n    var node;\n    var docOverflow;\n    var div = createElement('div');\n    var body = getBody();\n\n    if (parseInt(nodes, 10)) {\n      // In order not to give false positives we create a node for each test\n      // This also allows the method to scale for unspecified uses\n      while (nodes--) {\n        node = createElement('div');\n        node.id = testnames ? testnames[nodes] : mod + (nodes + 1);\n        div.appendChild(node);\n      }\n    }\n\n    style = createElement('style');\n    style.type = 'text/css';\n    style.id = 's' + mod; // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.\n    // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270\n\n    (!body.fake ? div : body).appendChild(style);\n    body.appendChild(div);\n\n    if (style.styleSheet) {\n      style.styleSheet.cssText = rule;\n    } else {\n      style.appendChild(document.createTextNode(rule));\n    }\n\n    div.id = mod;\n\n    if (body.fake) {\n      //avoid crashing IE8, if background image is used\n      body.style.background = ''; //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible\n\n      body.style.overflow = 'hidden';\n      docOverflow = docElement.style.overflow;\n      docElement.style.overflow = 'hidden';\n      docElement.appendChild(body);\n    }\n\n    ret = callback(div, rule); // If this is done after page load we don't want to remove the body so check if body exists\n\n    if (body.fake) {\n      body.parentNode.removeChild(body);\n      docElement.style.overflow = docOverflow; // Trigger layout so kinetic scrolling isn't disabled in iOS6+\n      // eslint-disable-next-line\n\n      docElement.offsetHeight;\n    } else {\n      div.parentNode.removeChild(div);\n    }\n\n    return !!ret;\n  }\n  /**\n   * testStyles injects an element with style element and some CSS rules\n   *\n   * @memberof Modernizr\n   * @name Modernizr.testStyles\n   * @optionName Modernizr.testStyles()\n   * @optionProp testStyles\n   * @access public\n   * @function testStyles\n   * @param {string} rule - String representing a css rule\n   * @param {function} callback - A function that is used to test the injected element\n   * @param {number} [nodes] - An integer representing the number of additional nodes you want injected\n   * @param {string[]} [testnames] - An array of strings that are used as ids for the additional nodes\n   * @returns {boolean}\n   * @example\n   *\n   * `Modernizr.testStyles` takes a CSS rule and injects it onto the current page\n   * along with (possibly multiple) DOM elements. This lets you check for features\n   * that can not be detected by simply checking the [IDL](https://developer.mozilla.org/en-US/docs/Mozilla/Developer_guide/Interface_development_guide/IDL_interface_rules).\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr { width: 9px; color: papayawhip; }', function(elem, rule) {\n   *   // elem is the first DOM node in the page (by default #modernizr)\n   *   // rule is the first argument you supplied - the CSS rule in string form\n   *\n   *   addTest('widthworks', elem.style.width === '9px')\n   * });\n   * ```\n   *\n   * If your test requires multiple nodes, you can include a third argument\n   * indicating how many additional div elements to include on the page. The\n   * additional nodes are injected as children of the `elem` that is returned as\n   * the first argument to the callback.\n   *\n   * ```js\n   * Modernizr.testStyles('#modernizr {width: 1px}; #modernizr2 {width: 2px}', function(elem) {\n   *   document.getElementById('modernizr').style.width === '1px'; // true\n   *   document.getElementById('modernizr2').style.width === '2px'; // true\n   *   elem.firstChild === document.getElementById('modernizr2'); // true\n   * }, 1);\n   * ```\n   *\n   * By default, all of the additional elements have an ID of `modernizr[n]`, where\n   * `n` is its index (e.g. the first additional, second overall is `#modernizr2`,\n   * the second additional is `#modernizr3`, etc.).\n   * If you want to have more meaningful IDs for your function, you can provide\n   * them as the fourth argument, as an array of strings\n   *\n   * ```js\n   * Modernizr.testStyles('#foo {width: 10px}; #bar {height: 20px}', function(elem) {\n   *   elem.firstChild === document.getElementById('foo'); // true\n   *   elem.lastChild === document.getElementById('bar'); // true\n   * }, 2, ['foo', 'bar']);\n   * ```\n   *\n   */\n\n\n  var testStyles = ModernizrProto.testStyles = injectElementWithStyles;\n  /*!\n  {\n    \"name\": \"Hidden Scrollbar\",\n    \"property\": \"hiddenscroll\",\n    \"authors\": [\"Oleg Korsunsky\"],\n    \"tags\": [\"overlay\"],\n    \"notes\": [{\n      \"name\": \"Overlay Scrollbar description\",\n      \"href\": \"https://developer.apple.com/library/mac/releasenotes/MacOSX/WhatsNewInOSX/Articles/MacOSX10_7.html#//apple_ref/doc/uid/TP40010355-SW39\"\n    },{\n      \"name\": \"Video example of overlay scrollbars\",\n      \"href\": \"https://gfycat.com/FoolishMeaslyAtlanticsharpnosepuffer\"\n    }]\n  }\n  !*/\n\n  /* DOC\n  Detects overlay scrollbars (when scrollbars on overflowed blocks are visible). This is found most commonly on mobile and OS X.\n  */\n\n  Modernizr.addTest('hiddenscroll', function () {\n    return testStyles('#modernizr {width:100px;height:100px;overflow:scroll}', function (elem) {\n      return elem.offsetWidth === elem.clientWidth;\n    });\n  });\n  /*!\n  {\n      \"name\": \"Retina Screen\",\n      \"property\": \"retina\",\n      \"caniuse\" : null,\n      \"tags\": [],\n      \"notes\": [{\n          \"name\": \"Retina spec\",\n          \"href\": \"\"\n      }],\n      \"warnings\": [\n          \"Indicates if the device being used has a retina display\"\n      ],\n      \"knownBugs\": []\n  }\n  !*/\n\n  /* DOC\n  Test if device has retina display\n  */\n\n  Modernizr.addTest('retina', function () {\n    var dpr = window.devicePixelRatio || window.screen.deviceXDPI / window.screen.logicalXDPI || 1;\n    return !!(1 < dpr);\n  });\n  /*!\n  {\n    \"name\": \"Touch Events\",\n    \"property\": \"touchevents\",\n    \"caniuse\" : \"touch\",\n    \"tags\": [\"media\", \"attribute\"],\n    \"notes\": [{\n      \"name\": \"Touch Events spec\",\n      \"href\": \"https://www.w3.org/TR/2013/WD-touch-events-20130124/\"\n    }],\n    \"warnings\": [\n      \"Indicates if the browser supports the Touch Events spec, and does not necessarily reflect a touchscreen device\"\n    ],\n    \"knownBugs\": [\n      \"False-positive on some configurations of Nokia N900\",\n      \"False-positive on some BlackBerry 6.0 builds – https://github.com/Modernizr/Modernizr/issues/372#issuecomment-3112695\"\n    ]\n  }\n  !*/\n\n  /* DOC\n  Indicates if the browser supports the W3C Touch Events API.\n   This *does not* necessarily reflect a touchscreen device:\n   * Older touchscreen devices only emulate mouse events\n  * Modern IE touch devices implement the Pointer Events API instead: use `Modernizr.pointerevents` to detect support for that\n  * Some browsers & OS setups may enable touch APIs when no touchscreen is connected\n  * Future browsers may implement other event models for touch interactions\n   See this article: [You Can't Detect A Touchscreen](http://www.stucox.com/blog/you-cant-detect-a-touchscreen/).\n   It's recommended to bind both mouse and touch/pointer events simultaneously – see [this HTML5 Rocks tutorial](http://www.html5rocks.com/en/mobile/touchandmouse/).\n   This test will also return `true` for Firefox 4 Multitouch support.\n  */\n  // Chrome (desktop) used to lie about its support on this, but that has since been rectified: http://crbug.com/36415\n\n  Modernizr.addTest('touchevents', function () {\n    var bool;\n\n    if ('ontouchstart' in window || window.DocumentTouch && document instanceof DocumentTouch) {\n      bool = true;\n    } else {\n      // include the 'heartz' as a way to have a non matching MQ to help terminate the join\n      // https://git.io/vznFH\n      var query = ['@media (', prefixes.join('touch-enabled),('), 'heartz', ')', '{#modernizr{top:9px;position:absolute}}'].join('');\n      testStyles(query, function (node) {\n        bool = 9 === node.offsetTop;\n      });\n    }\n\n    return bool;\n  }); // Run each test\n\n  testRunner(); // Remove the \"no-js\" class if it exists\n\n  setClasses(classes);\n  delete ModernizrProto.addTest;\n  delete ModernizrProto.addAsyncTest; // Run the things that are supposed to run after the tests\n\n  for (var i = 0; i < Modernizr._q.length; i++) {\n    Modernizr._q[i]();\n  }\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return Modernizr;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(window, document);\n\n//# sourceURL=webpack:///./src/assets/js/vendor/modernizr.js?");

/***/ }),

/***/ "./src/assets/js/vendor/navigation.js":
/*!********************************************!*\
  !*** ./src/assets/js/vendor/navigation.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * File navigation.js.\n *\n * Handles toggling the navigation menu for small screens and enables TAB key\n * navigation support for dropdown menus.\n */\nvar navigation = function navigation(undefined) {\n  var links, container, button, menu, i, len;\n  container = document.getElementById('site-navigation');\n\n  if (!container) {\n    return;\n  }\n\n  button = container.querySelector('button'); // querySelector will automatically return the first match.\n\n  if (undefined === _typeof(button)) {\n    return;\n  }\n\n  menu = container.querySelector('ul'); // Hide menu toggle button if menu is empty and return early.\n\n  if (undefined === _typeof(menu)) {\n    button.style.display = 'none';\n    return;\n  }\n\n  menu.setAttribute('aria-expanded', 'false');\n\n  if (!menu.classList.contains('nav-menu')) {\n    menu.classList.add('nav-menu');\n  }\n\n  button.onclick = function () {\n    if (container.classList.contains('toggled')) {\n      container.classList.remove('toggled');\n      button.setAttribute('aria-expanded', 'false');\n      menu.setAttribute('aria-expanded', 'false');\n    } else {\n      container.classList.add('toggled');\n      button.setAttribute('aria-expanded', 'true');\n      menu.setAttribute('aria-expanded', 'true');\n    }\n  }; // Get all the link elements within the menu.\n\n\n  links = menu.querySelectorAll('a'); // Each time a menu link is focused or blurred, toggle focus.\n\n  links.forEach(function (link) {\n    link.addEventListener('focus', toggleFocus, true);\n    link.addEventListener('blur', toggleFocus, true);\n  });\n  /**\n   * Sets or removes .focus class on an element.\n   */\n\n  function toggleFocus() {\n    var self = this; // Move up through the ancestors of the current link until we hit .nav-menu.\n\n    while (!self.classList.contains('nav-menu')) {\n      // On li elements toggle the class .focus.\n      if ('LI' === self.tagName) {\n        if (self.classList.contains('focus')) {\n          self.classList.remove('focus');\n        } else {\n          self.classList.add('focus');\n        }\n      }\n\n      self = self.parentElement;\n    }\n  }\n  /**\n   * Toggles `focus` class to allow submenu access on tablets.\n   */\n\n\n  (function (container) {\n    var touchStartFn,\n        i,\n        parentLink = container.querySelectorAll('.menu-item-has-children > a, .page_item_has_children > a');\n\n    if ('ontouchstart' in window) {\n      touchStartFn = function touchStartFn(e) {\n        var i,\n            menuItem = this.parentNode;\n\n        if (!menuItem.classList.contains('focus')) {\n          e.preventDefault();\n\n          for (i = 0; i < menuItem.parentNode.children.length; ++i) {\n            if (menuItem === menuItem.parentNode.children[i]) {\n              continue;\n            }\n\n            menuItem.parentNode.children[i].classList.remove('focus');\n          }\n\n          menuItem.classList.add('focus');\n        } else {\n          menuItem.classList.remove('focus');\n        }\n      };\n\n      parentLink.forEach(function (child) {\n        child.addEventListener('touchstart', touchStartFn, false);\n      });\n    }\n  })(container);\n};\n\nmodule.exports = navigation;\n\n//# sourceURL=webpack:///./src/assets/js/vendor/navigation.js?");

/***/ }),

/***/ "./src/assets/js/vendor/no-fouc.js":
/*!*****************************************!*\
  !*** ./src/assets/js/vendor/no-fouc.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function () {\n  var b = document.body,\n      c = 'className',\n      cs = 'customize-support',\n      rcs = new RegExp('(^|\\\\s+)(no-)?' + cs + '(\\\\s+|$)');\n  b[c] = b[c].replace(rcs, ' ');\n  b[c] += ' no-customize-support';\n}();\n\n//# sourceURL=webpack:///./src/assets/js/vendor/no-fouc.js?");

/***/ }),

/***/ "./src/assets/js/vendor/skip-link-focus-fix.js":
/*!*****************************************************!*\
  !*** ./src/assets/js/vendor/skip-link-focus-fix.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/**\n * File skip-link-focus-fix.js.\n *\n * Helps with accessibility for keyboard only users.\n *\n * Learn more: https://git.io/vWdr2\n */\nmodule.exports = function () {\n  var isIe = /(trident|msie)/i.test(navigator.userAgent);\n\n  if (isIe && document.getElementById && window.addEventListener) {\n    window.addEventListener('hashchange', function () {\n      var id = location.hash.substring(1),\n          element;\n\n      if (!/^[A-z0-9_-]+$/.test(id)) {\n        return;\n      }\n\n      element = document.getElementById(id);\n\n      if (element) {\n        if (!/^(?:a|select|input|button|textarea)$/i.test(element.tagName)) {\n          element.tabIndex = -1;\n        }\n\n        element.focus();\n      }\n    }, false);\n  }\n}();\n\n//# sourceURL=webpack:///./src/assets/js/vendor/skip-link-focus-fix.js?");

/***/ }),

/***/ 0:
/*!************************************!*\
  !*** multi ./src/assets/js/app.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! /Users/us00278/Sites/davey/html/wp-content/themes/daveyjacobson/src/assets/js/app.js */\"./src/assets/js/app.js\");\n\n\n//# sourceURL=webpack:///multi_./src/assets/js/app.js?");

/***/ })

/******/ });